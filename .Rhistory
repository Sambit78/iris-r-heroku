library(tidyverse)
library(tidyquant)
library(lime)
# Load Data
path_train            <- "00_Data/telco_train.xlsx"
path_test             <- "00_Data/telco_test.xlsx"
path_data_definitions <- "00_Data/telco_data_definitions.xlsx"
train_raw_tbl       <- read_excel(path_train, sheet = 1)
test_raw_tbl        <- read_excel(path_test, sheet = 1)
definitions_raw_tbl <- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)
# Processing Pipeline
source("00_Scripts/data_processing_pipeline.R")
train_readable_tbl <- process_hr_data_readable(train_raw_tbl, definitions_raw_tbl)
test_readable_tbl  <- process_hr_data_readable(test_raw_tbl, definitions_raw_tbl)
# ML Preprocessing Recipe
recipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%
step_zv(all_predictors()) %>%
step_num2factor(JobLevel, levels = c('1', '2', '3', '4', '5')) %>%
step_num2factor(StockOptionLevel, levels = c('0', '1', '2', '3'), transform = function(x) {x + 1}) %>%
prep()
recipe_obj
train_tbl <- bake(recipe_obj, new_data = train_readable_tbl)
test_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)
# 2. Models ----
h2o.init()
automl_leader <- h2o.loadModel("04_Modeling/h2o_models/DeepLearning_grid__2_AutoML_20201203_161901_model_1")
automl_leader
# 3. LIME ----
# 3.1 Making Predictions ----
predictions_tbl <- automl_leader %>%
h2o.predict(newdata = as.h2o(test_tbl)) %>%
as_tibble() %>%
bind_cols(
test_tbl %>%
select(Attrition, EmployeeNumber) %>%
ungroup %>%
as.data.frame()
)
predictions_tbl
test_tbl %>%
slice(5) %>%
glimpse()
# 3.2 Single Explanation ----
explainer <- train_tbl %>%
select(-Attrition) %>%
lime(
model           = automl_leader,
bin_continuous  = TRUE,
n_bins          = 4,
quantile_bins   = TRUE
)
explainer
explanation <- test_tbl %>%
slice(5) %>%
select(-Attrition) %>%
lime::explain(
explainer = explainer,
n_labels   = 1,
n_features = 8,
n_permutations = 5000,
kernel_width   = 1
)
explanation %>%
as.tibble() %>%
select(feature:prediction)
plot_features(explanation = explanation, ncol = 1)
explanation <- test_tbl %>%
slice(1:20) %>%
select(-Attrition) %>%
lime::explain(
explainer = explainer,
n_labels   = 1,
n_features = 8,
n_permutations = 5000,
kernel_width   = 1
)
explanation %>%
as.tibble()
plot_features(explanation, ncol = 4)
plot_explanations(explanation)
runApp('test2.R')
# LIME FEATURE EXPLANATION ----
# 1. Setup ----
setwd("~/Documents/Data Science/Attrition Modeling")
# Load Libraries
library(h2o)
library(recipes)
library(readxl)
library(tidyverse)
library(tidyquant)
library(lime)
# Load Data
path_train            <- "00_Data/telco_train.xlsx"
path_test             <- "00_Data/telco_test.xlsx"
path_data_definitions <- "00_Data/telco_data_definitions.xlsx"
train_raw_tbl       <- read_excel(path_train, sheet = 1)
test_raw_tbl        <- read_excel(path_test, sheet = 1)
definitions_raw_tbl <- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)
# Processing Pipeline
source("00_Scripts/data_processing_pipeline.R")
train_readable_tbl <- process_hr_data_readable(train_raw_tbl, definitions_raw_tbl)
test_readable_tbl  <- process_hr_data_readable(test_raw_tbl, definitions_raw_tbl)
# ML Preprocessing Recipe
recipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%
step_zv(all_predictors()) %>%
step_num2factor(JobLevel, levels = c('1', '2', '3', '4', '5')) %>%
step_num2factor(StockOptionLevel, levels = c('0', '1', '2', '3'), transform = function(x) {x + 1}) %>%
prep()
recipe_obj
train_tbl <- bake(recipe_obj, new_data = train_readable_tbl)
test_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)
# 2. Models ----
h2o.init()
automl_leader <- h2o.loadModel("04_Modeling/h2o_models/DeepLearning_grid__2_AutoML_20201203_161901_model_1")
automl_leader
# 3. LIME ----
# 3.1 Making Predictions ----
predictions_tbl <- automl_leader %>%
h2o.predict(newdata = as.h2o(test_tbl)) %>%
as_tibble() %>%
bind_cols(
test_tbl %>%
select(Attrition, EmployeeNumber) %>%
ungroup %>%
as.data.frame()
)
predictions_tbl
test_tbl %>%
slice(5) %>%
glimpse()
# 3.2 Single Explanation ----
explainer <- train_tbl %>%
select(-Attrition) %>%
lime(
model           = automl_leader,
bin_continuous  = TRUE,
n_bins          = 4,
quantile_bins   = TRUE
)
explainer
explanation <- test_tbl %>%
slice(5) %>%
select(-Attrition) %>%
lime::explain(
explainer = explainer,
n_labels   = 1,
n_features = 8,
n_permutations = 5000,
kernel_width   = 1
)
explanation %>%
as.tibble() %>%
select(feature:prediction)
plot_features(explanation = explanation, ncol = 1)
# 3.3 Multiple Explanations ----
explanation <- test_tbl %>%
slice(1:20) %>%
select(-Attrition) %>%
lime::explain(
explainer = explainer,
n_labels   = 1,
n_features = 8,
n_permutations = 5000,
kernel_width   = 1
)
explanation %>%
as.tibble()
plot_features(explanation, ncol = 4)
plot_explanations(explanation)
# 4. Challenge Solutions ----
# 4.1 Recreating plot_features() -----
explanation %>%
as.tibble()
case_1 <- explanation %>%
filter(case == 1)
case_1 %>%
plot_features()
library(glue)
# Transformation
data_transformed <- case_1 %>%
as.tibble() %>%
mutate(
feature_desc = as_factor(feature_desc) %>%
fct_reorder(abs(feature_weight), .desc = FALSE),
key     = ifelse(feature_weight > 0, "Supports", "Contradicts") %>%
fct_relevel("Supports"),
case_text    = glue("Case: {case}"),
label_text   = glue("Label: {label}"),
prob_text    = glue("Probability: {round(label_prob, 2)}"),
r2_text      = glue("Explanation Fit: {model_r2 %>% round(2)}")
) %>%
select(feature_desc, feature_weight, key, case_text:r2_text)
data_transformed
runApp('test2.R')
runApp('test2.R')
# LIME FEATURE EXPLANATION ----
# 1. Setup ----
setwd("~/Documents/Data Science/Attrition Modeling")
# Load Libraries
library(h2o)
library(recipes)
library(readxl)
library(tidyverse)
library(tidyquant)
library(lime)
# Load Data
path_train            <- "00_Data/telco_train.xlsx"
path_test             <- "00_Data/telco_test.xlsx"
path_data_definitions <- "00_Data/telco_data_definitions.xlsx"
train_raw_tbl       <- read_excel(path_train, sheet = 1)
test_raw_tbl        <- read_excel(path_test, sheet = 1)
definitions_raw_tbl <- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)
# Processing Pipeline
source("00_Scripts/data_processing_pipeline.R")
train_readable_tbl <- process_hr_data_readable(train_raw_tbl, definitions_raw_tbl)
test_readable_tbl  <- process_hr_data_readable(test_raw_tbl, definitions_raw_tbl)
# ML Preprocessing Recipe
recipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%
step_zv(all_predictors()) %>%
step_num2factor(JobLevel, levels = c('1', '2', '3', '4', '5')) %>%
step_num2factor(StockOptionLevel, levels = c('0', '1', '2', '3'), transform = function(x) {x + 1}) %>%
prep()
recipe_obj
train_tbl <- bake(recipe_obj, new_data = train_readable_tbl)
test_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)
# 2. Models ----
h2o.init()
automl_leader <- h2o.loadModel("04_Modeling/h2o_models/DeepLearning_grid__2_AutoML_20201203_161901_model_1")
automl_leader
# 3. LIME ----
# 3.1 Making Predictions ----
predictions_tbl <- automl_leader %>%
h2o.predict(newdata = as.h2o(test_tbl)) %>%
as_tibble() %>%
bind_cols(
test_tbl %>%
select(Attrition, EmployeeNumber) %>%
ungroup %>%
as.data.frame()
)
predictions_tbl
test_tbl %>%
slice(5) %>%
glimpse()
# 3.2 Single Explanation ----
explainer <- train_tbl %>%
select(-Attrition) %>%
lime(
model           = automl_leader,
bin_continuous  = TRUE,
n_bins          = 4,
quantile_bins   = TRUE
)
explainer
explanation <- test_tbl %>%
slice(5) %>%
select(-Attrition) %>%
lime::explain(
explainer = explainer,
n_labels   = 1,
n_features = 8,
n_permutations = 5000,
kernel_width   = 1
)
explanation %>%
as.tibble() %>%
select(feature:prediction)
plot_features(explanation = explanation, ncol = 1)
data_transformed <- test_tbl %>%
filter(EmployeeNumber == input$Employee_Number)%>%
select(-Attrition) %>%
lime::explain(
explainer = explainer,
n_labels   = 1,
n_features = 8,
n_permutations = 5000,
kernel_width   = 1
), ncol = 1)%>%
filter(case == 1) %>%
as.tibble() %>%
mutate(
feature_desc = as_factor(feature_desc) %>%
fct_reorder(abs(feature_weight), .desc = FALSE),
key     = ifelse(feature_weight > 0, "Supports", "Contradicts") %>%
fct_relevel("Supports"),
case_text    = glue("Case: {case}"),
label_text   = glue("Label: {label}"),
prob_text    = glue("Probability: {round(label_prob, 2)}"),
r2_text      = glue("Explanation Fit: {model_r2 %>% round(2)}")
) %>%
select(feature_desc, feature_weight, key, case_text:r2_text) %>%
ggplot(aes(feature_desc, feature_weight, fill = key)) +
geom_col() +
coord_flip() +
theme_tq() +
scale_fill_tq() +
labs(y = "Weight", x = "Feature") +
facet_wrap(~ case_text + label_text + prob_text + r2_text,
ncol = 1, scales = "free")
data_transformed <- test_tbl %>%
filter(EmployeeNumber == input$Employee_Number)%>%
select(-Attrition) %>%
lime::explain(
explainer = explainer,
n_labels   = 1,
n_features = 8,
n_permutations = 5000,
kernel_width   = 1,
ncol = 1)%>%
filter(case == 1) %>%
as.tibble() %>%
mutate(
feature_desc = as_factor(feature_desc) %>%
fct_reorder(abs(feature_weight), .desc = FALSE),
key     = ifelse(feature_weight > 0, "Supports", "Contradicts") %>%
fct_relevel("Supports"),
case_text    = glue("Case: {case}"),
label_text   = glue("Label: {label}"),
prob_text    = glue("Probability: {round(label_prob, 2)}"),
r2_text      = glue("Explanation Fit: {model_r2 %>% round(2)}")
) %>%
select(feature_desc, feature_weight, key, case_text:r2_text) %>%
ggplot(aes(feature_desc, feature_weight, fill = key)) +
geom_col() +
coord_flip() +
theme_tq() +
scale_fill_tq() +
labs(y = "Weight", x = "Feature") +
facet_wrap(~ case_text + label_text + prob_text + r2_text,
ncol = 1, scales = "free")
data_transformed <- test_tbl %>%
select(-Attrition) %>%
lime::explain(
explainer = explainer,
n_labels   = 1,
n_features = 8,
n_permutations = 5000,
kernel_width   = 1,
ncol = 1)%>%
filter(case == 1) %>%
as.tibble() %>%
mutate(
feature_desc = as_factor(feature_desc) %>%
fct_reorder(abs(feature_weight), .desc = FALSE),
key     = ifelse(feature_weight > 0, "Supports", "Contradicts") %>%
fct_relevel("Supports"),
case_text    = glue("Case: {case}"),
label_text   = glue("Label: {label}"),
prob_text    = glue("Probability: {round(label_prob, 2)}"),
r2_text      = glue("Explanation Fit: {model_r2 %>% round(2)}")
) %>%
select(feature_desc, feature_weight, key, case_text:r2_text) %>%
ggplot(aes(feature_desc, feature_weight, fill = key)) +
geom_col() +
coord_flip() +
theme_tq() +
scale_fill_tq() +
labs(y = "Weight", x = "Feature") +
facet_wrap(~ case_text + label_text + prob_text + r2_text,
ncol = 1, scales = "free")
# LIME FEATURE EXPLANATION ----
# 1. Setup ----
setwd("~/Documents/Data Science/Attrition Modeling")
# Load Libraries
library(h2o)
library(recipes)
library(readxl)
library(tidyverse)
library(tidyquant)
library(lime)
# Load Data
path_train            <- "00_Data/telco_train.xlsx"
path_test             <- "00_Data/telco_test.xlsx"
path_data_definitions <- "00_Data/telco_data_definitions.xlsx"
train_raw_tbl       <- read_excel(path_train, sheet = 1)
test_raw_tbl        <- read_excel(path_test, sheet = 1)
definitions_raw_tbl <- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)
# Processing Pipeline
source("00_Scripts/data_processing_pipeline.R")
train_readable_tbl <- process_hr_data_readable(train_raw_tbl, definitions_raw_tbl)
test_readable_tbl  <- process_hr_data_readable(test_raw_tbl, definitions_raw_tbl)
# ML Preprocessing Recipe
recipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%
step_zv(all_predictors()) %>%
step_num2factor(JobLevel, levels = c('1', '2', '3', '4', '5')) %>%
step_num2factor(StockOptionLevel, levels = c('0', '1', '2', '3'), transform = function(x) {x + 1}) %>%
prep()
recipe_obj
train_tbl <- bake(recipe_obj, new_data = train_readable_tbl)
test_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)
# 2. Models ----
h2o.init()
automl_leader <- h2o.loadModel("04_Modeling/h2o_models/DeepLearning_grid__2_AutoML_20201203_161901_model_1")
automl_leader
# 3. LIME ----
# 3.1 Making Predictions ----
predictions_tbl <- automl_leader %>%
h2o.predict(newdata = as.h2o(test_tbl)) %>%
as_tibble() %>%
bind_cols(
test_tbl %>%
select(Attrition, EmployeeNumber) %>%
ungroup %>%
as.data.frame()
)
predictions_tbl
test_tbl %>%
slice(5) %>%
glimpse()
# 3.2 Single Explanation ----
explainer <- train_tbl %>%
select(-Attrition) %>%
lime(
model           = automl_leader,
bin_continuous  = TRUE,
n_bins          = 4,
quantile_bins   = TRUE
)
explainer
explanation <- test_tbl %>%
slice(5) %>%
select(-Attrition) %>%
lime::explain(
explainer = explainer,
n_labels   = 1,
n_features = 8,
n_permutations = 5000,
kernel_width   = 1
)
explanation %>%
as.tibble() %>%
select(feature:prediction)
plot_features(explanation = explanation, ncol = 1)
data_transformed <- test_tbl %>%
select(-Attrition) %>%
lime::explain(
explainer = explainer,
n_labels   = 1,
n_features = 8,
n_permutations = 5000,
kernel_width   = 1,
ncol = 1)%>%
filter(case == 1) %>%
as.tibble() %>%
mutate(
feature_desc = as_factor(feature_desc) %>%
fct_reorder(abs(feature_weight), .desc = FALSE),
key     = ifelse(feature_weight > 0, "Supports", "Contradicts") %>%
fct_relevel("Supports"),
case_text    = glue("Case: {case}"),
label_text   = glue("Label: {label}"),
prob_text    = glue("Probability: {round(label_prob, 2)}"),
r2_text      = glue("Explanation Fit: {model_r2 %>% round(2)}")
) %>%
select(feature_desc, feature_weight, key, case_text:r2_text) %>%
ggplot(aes(feature_desc, feature_weight, fill = key)) +
geom_col() +
coord_flip() +
theme_tq() +
scale_fill_tq() +
labs(y = "Weight", x = "Feature") +
facet_wrap(~ case_text + label_text + prob_text + r2_text,
ncol = 1, scales = "free")
data_transformed <- test_tbl %>%
select(-Attrition) %>%
lime::explain(
explainer = explainer,
n_labels   = 1,
n_features = 8,
n_permutations = 5000,
kernel_width   = 1,
ncol = 1)%>%
filter(case == 1) %>%
as.tibble() %>%
mutate(
feature_desc = as_factor(feature_desc) %>%
fct_reorder(abs(feature_weight), .desc = FALSE),
key     = ifelse(feature_weight > 0, "Supports", "Contradicts") %>%
fct_relevel("Supports")
) %>%
select(feature_desc, feature_weight, key, case_text:r2_text) %>%
ggplot(aes(feature_desc, feature_weight, fill = key)) +
geom_col() +
coord_flip() +
theme_tq() +
scale_fill_tq() +
labs(y = "Weight", x = "Feature") +
facet_wrap(~ case_text + label_text + prob_text + r2_text,
ncol = 1, scales = "free")
runApp('test2.R')
runApp('test2.R')
runApp('test2.R')
runApp('test2.R')
library(shiny); runApp('shinyapp.R')
runApp('shinyapp.R')
runApp('attrition.R')
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE,
comment = "##",
out.width = "100%",
out.height = "100%",
dpi = 300,
code_folding = TRUE,
R.options = list(width = 70))
knitr::include_graphics("groupimpact_files/rupixen-com-iSs4_hV7j2A-unsplash.jpg")
library(shiny); runApp('attrition.R')
shiny::runApp('~/Downloads/iris-r-heroku')
runApp('~/Documents/Data Science/Attrition Modeling/attrition.R')
library(shiny); runApp('attrition.R')
runApp('~/Downloads/iris-r-heroku')
